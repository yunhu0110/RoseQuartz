declare const Bank: {
  readonly BANK_OF_KOREA: "BANK_BANK_OF_KOREA";
  readonly KOREA_DEVELOPMENT_BANK: "BANK_KOREA_DEVELOPMENT_BANK";
  readonly INDUSTRIAL_BANK_OF_KOREA: "BANK_INDUSTRIAL_BANK_OF_KOREA";
  readonly KOOKMIN_BANK: "BANK_KOOKMIN_BANK";
  readonly SUHYUP_BANK: "BANK_SUHYUP_BANK";
  readonly EXPORT_IMPORT_BANK_OF_KOREA: "BANK_EXPORT_IMPORT_BANK_OF_KOREA";
  readonly NH_NONGHYUP_BANK: "BANK_NH_NONGHYUP_BANK";
  readonly LOCAL_NONGHYUP: "BANK_LOCAL_NONGHYUP";
  readonly WOORI_BANK: "BANK_WOORI_BANK";
  readonly SC_BANK_KOREA: "BANK_SC_BANK_KOREA";
  readonly CITI_BANK_KOREA: "BANK_CITI_BANK_KOREA";
  readonly DAEGU_BANK: "BANK_DAEGU_BANK";
  readonly BUSAN_BANK: "BANK_BUSAN_BANK";
  readonly GWANGJU_BANK: "BANK_GWANGJU_BANK";
  readonly JEJU_BANK: "BANK_JEJU_BANK";
  readonly JEONBUK_BANK: "BANK_JEONBUK_BANK";
  readonly KYONGNAM_BANK: "BANK_KYONGNAM_BANK";
  readonly KFCC: "BANK_KFCC";
  readonly SHINHYUP: "BANK_SHINHYUP";
  readonly SAVINGS_BANK_KOREA: "BANK_SAVINGS_BANK_KOREA";
  readonly MORGAN_STANLEY_BANK: "BANK_MORGAN_STANLEY_BANK";
  readonly HSBC_BANK: "BANK_HSBC_BANK";
  readonly DEUTSCHE_BANK: "BANK_DEUTSCHE_BANK";
  readonly JP_MORGAN_CHASE_BANK: "BANK_JP_MORGAN_CHASE_BANK";
  readonly MIZUHO_BANK: "BANK_MIZUHO_BANK";
  readonly MUFG_BANK: "BANK_MUFG_BANK";
  readonly BANK_OF_AMERICA_BANK: "BANK_BANK_OF_AMERICA_BANK";
  readonly BNP_PARIBAS_BANK: "BANK_BNP_PARIBAS_BANK";
  readonly ICBC: "BANK_ICBC";
  readonly BANK_OF_CHINA: "BANK_BANK_OF_CHINA";
  readonly NATIONAL_FORESTRY_COOPERATIVE_FEDERATION:
    "BANK_NATIONAL_FORESTRY_COOPERATIVE_FEDERATION";
  readonly UNITED_OVERSEAS_BANK: "BANK_UNITED_OVERSEAS_BANK";
  readonly BANK_OF_COMMUNICATIONS: "BANK_BANK_OF_COMMUNICATIONS";
  readonly CHINA_CONSTRUCTION_BANK: "BANK_CHINA_CONSTRUCTION_BANK";
  readonly EPOST: "BANK_EPOST";
  readonly KODIT: "BANK_KODIT";
  readonly KIBO: "BANK_KIBO";
  readonly HANA_BANK: "BANK_HANA_BANK";
  readonly SHINHAN_BANK: "BANK_SHINHAN_BANK";
  readonly K_BANK: "BANK_K_BANK";
  readonly KAKAO_BANK: "BANK_KAKAO_BANK";
  readonly TOSS_BANK: "BANK_TOSS_BANK";
  readonly KCIS: "BANK_KCIS";
  readonly DAISHIN_SAVINGS_BANK: "BANK_DAISHIN_SAVINGS_BANK";
  readonly SBI_SAVINGS_BANK: "BANK_SBI_SAVINGS_BANK";
  readonly HK_SAVINGS_BANK: "BANK_HK_SAVINGS_BANK";
  readonly WELCOME_SAVINGS_BANK: "BANK_WELCOME_SAVINGS_BANK";
  readonly SHINHAN_SAVINGS_BANK: "BANK_SHINHAN_SAVINGS_BANK";
  readonly KYOBO_SECURITIES: "BANK_KYOBO_SECURITIES";
  readonly DAISHIN_SECURITIES: "BANK_DAISHIN_SECURITIES";
  readonly MERITZ_SECURITIES: "BANK_MERITZ_SECURITIES";
  readonly MIRAE_ASSET_SECURITIES: "BANK_MIRAE_ASSET_SECURITIES";
  readonly BOOKOOK_SECURITIES: "BANK_BOOKOOK_SECURITIES";
  readonly SAMSUNG_SECURITIES: "BANK_SAMSUNG_SECURITIES";
  readonly SHINYOUNG_SECURITIES: "BANK_SHINYOUNG_SECURITIES";
  readonly SHINHAN_FINANCIAL_INVESTMENT: "BANK_SHINHAN_FINANCIAL_INVESTMENT";
  readonly YUANTA_SECURITIES: "BANK_YUANTA_SECURITIES";
  readonly EUGENE_INVESTMENT_SECURITIES: "BANK_EUGENE_INVESTMENT_SECURITIES";
  readonly KAKAO_PAY_SECURITIES: "BANK_KAKAO_PAY_SECURITIES";
  readonly TOSS_SECURITIES: "BANK_TOSS_SECURITIES";
  readonly KOREA_FOSS_SECURITIES: "BANK_KOREA_FOSS_SECURITIES";
  readonly HANA_FINANCIAL_INVESTMENT: "BANK_HANA_FINANCIAL_INVESTMENT";
  readonly HI_INVESTMENT_SECURITIES: "BANK_HI_INVESTMENT_SECURITIES";
  readonly KOREA_INVESTMENT_SECURITIES: "BANK_KOREA_INVESTMENT_SECURITIES";
  readonly HANWHA_INVESTMENT_SECURITIES: "BANK_HANWHA_INVESTMENT_SECURITIES";
  readonly HYUNDAI_MOTOR_SECURITIES: "BANK_HYUNDAI_MOTOR_SECURITIES";
  readonly DB_FINANCIAL_INVESTMENT: "BANK_DB_FINANCIAL_INVESTMENT";
  readonly KB_SECURITIES: "BANK_KB_SECURITIES";
  readonly KTB_INVESTMENT_SECURITIES: "BANK_KTB_INVESTMENT_SECURITIES";
  readonly NH_INVESTMENT_SECURITIES: "BANK_NH_INVESTMENT_SECURITIES";
  readonly SK_SECURITIES: "BANK_SK_SECURITIES";
};
type Bank = typeof Bank[keyof typeof Bank];

declare const BillingKeyPayMethod: {
  readonly Card: "CARD";
  readonly Mobile: "MOBILE";
};
type BillingKeyPayMethod =
  typeof BillingKeyPayMethod[keyof typeof BillingKeyPayMethod];

declare const CardCompany: {
  readonly KOREA_DEVELOPMENT_BANK: "CARD_COMPANY_KOREA_DEVELOPMENT_BANK";
  readonly KFCC: "CARD_COMPANY_KFCC";
  readonly SHINHYUP: "CARD_COMPANY_SHINHYUP";
  readonly EPOST: "CARD_COMPANY_EPOST";
  readonly SAVINGS_BANK_KOREA: "CARD_COMPANY_SAVINGS_BANK_KOREA";
  readonly KAKAO_BANK: "CARD_COMPANY_KAKAO_BANK";
  readonly WOORI_CARD: "CARD_COMPANY_WOORI_CARD";
  readonly BC_CARD: "CARD_COMPANY_BC_CARD";
  readonly GWANGJU_CARD: "CARD_COMPANY_GWANGJU_CARD";
  readonly SAMSUNG_CARD: "CARD_COMPANY_SAMSUNG_CARD";
  readonly SHINHAN_CARD: "CARD_COMPANY_SHINHAN_CARD";
  readonly HYUNDAI_CARD: "CARD_COMPANY_HYUNDAI_CARD";
  readonly LOTTE_CARD: "CARD_COMPANY_LOTTE_CARD";
  readonly SUHYUP_CARD: "CARD_COMPANY_SUHYUP_CARD";
  readonly CITI_CARD: "CARD_COMPANY_CITI_CARD";
  readonly NH_CARD: "CARD_COMPANY_NH_CARD";
  readonly JEONBUK_CARD: "CARD_COMPANY_JEONBUK_CARD";
  readonly JEJU_CARD: "CARD_COMPANY_JEJU_CARD";
  readonly HANA_CARD: "CARD_COMPANY_HANA_CARD";
  readonly KOOKMIN_CARD: "CARD_COMPANY_KOOKMIN_CARD";
  readonly K_BANK: "CARD_COMPANY_K_BANK";
  readonly TOSS_BANK: "CARD_COMPANY_TOSS_BANK";
};
type CardCompany = typeof CardCompany[keyof typeof CardCompany];

declare const Carrier: {
  readonly SKT: "CARRIER_SKT";
  readonly KT: "CARRIER_KT";
  readonly LGU: "CARRIER_LGU";
  readonly HELLO: "CARRIER_HELLO";
  readonly KCT: "CARRIER_KCT";
  readonly SK7: "CARRIER_SK7";
};
type Carrier = typeof Carrier[keyof typeof Carrier];

declare const CashReceiptType: {
  readonly PERSONAL: "CASH_RECEIPT_TYPE_PERSONAL";
  readonly CORPORATE: "CASH_RECEIPT_TYPE_CORPORATE";
  readonly ANONYMOUS: "CASH_RECEIPT_TYPE_ANONYMOUS";
};
type CashReceiptType = typeof CashReceiptType[keyof typeof CashReceiptType];

declare const Country: {
  readonly AF: "COUNTRY_AF";
  readonly AX: "COUNTRY_AX";
  readonly AL: "COUNTRY_AL";
  readonly DZ: "COUNTRY_DZ";
  readonly AS: "COUNTRY_AS";
  readonly AD: "COUNTRY_AD";
  readonly AO: "COUNTRY_AO";
  readonly AI: "COUNTRY_AI";
  readonly AQ: "COUNTRY_AQ";
  readonly AG: "COUNTRY_AG";
  readonly AR: "COUNTRY_AR";
  readonly AM: "COUNTRY_AM";
  readonly AW: "COUNTRY_AW";
  readonly AU: "COUNTRY_AU";
  readonly AT: "COUNTRY_AT";
  readonly AZ: "COUNTRY_AZ";
  readonly BH: "COUNTRY_BH";
  readonly BS: "COUNTRY_BS";
  readonly BD: "COUNTRY_BD";
  readonly BB: "COUNTRY_BB";
  readonly BY: "COUNTRY_BY";
  readonly BE: "COUNTRY_BE";
  readonly BZ: "COUNTRY_BZ";
  readonly BJ: "COUNTRY_BJ";
  readonly BM: "COUNTRY_BM";
  readonly BT: "COUNTRY_BT";
  readonly BO: "COUNTRY_BO";
  readonly BQ: "COUNTRY_BQ";
  readonly BA: "COUNTRY_BA";
  readonly BW: "COUNTRY_BW";
  readonly BV: "COUNTRY_BV";
  readonly BR: "COUNTRY_BR";
  readonly IO: "COUNTRY_IO";
  readonly BN: "COUNTRY_BN";
  readonly BG: "COUNTRY_BG";
  readonly BF: "COUNTRY_BF";
  readonly BI: "COUNTRY_BI";
  readonly KH: "COUNTRY_KH";
  readonly CM: "COUNTRY_CM";
  readonly CA: "COUNTRY_CA";
  readonly CV: "COUNTRY_CV";
  readonly KY: "COUNTRY_KY";
  readonly CF: "COUNTRY_CF";
  readonly TD: "COUNTRY_TD";
  readonly CL: "COUNTRY_CL";
  readonly CN: "COUNTRY_CN";
  readonly CX: "COUNTRY_CX";
  readonly CC: "COUNTRY_CC";
  readonly CO: "COUNTRY_CO";
  readonly KM: "COUNTRY_KM";
  readonly CG: "COUNTRY_CG";
  readonly CD: "COUNTRY_CD";
  readonly CK: "COUNTRY_CK";
  readonly CR: "COUNTRY_CR";
  readonly CI: "COUNTRY_CI";
  readonly HR: "COUNTRY_HR";
  readonly CU: "COUNTRY_CU";
  readonly CW: "COUNTRY_CW";
  readonly CY: "COUNTRY_CY";
  readonly CZ: "COUNTRY_CZ";
  readonly DK: "COUNTRY_DK";
  readonly DJ: "COUNTRY_DJ";
  readonly DM: "COUNTRY_DM";
  readonly DO: "COUNTRY_DO";
  readonly EC: "COUNTRY_EC";
  readonly EG: "COUNTRY_EG";
  readonly SV: "COUNTRY_SV";
  readonly GQ: "COUNTRY_GQ";
  readonly ER: "COUNTRY_ER";
  readonly EE: "COUNTRY_EE";
  readonly ET: "COUNTRY_ET";
  readonly FK: "COUNTRY_FK";
  readonly FO: "COUNTRY_FO";
  readonly FJ: "COUNTRY_FJ";
  readonly FI: "COUNTRY_FI";
  readonly FR: "COUNTRY_FR";
  readonly GF: "COUNTRY_GF";
  readonly PF: "COUNTRY_PF";
  readonly TF: "COUNTRY_TF";
  readonly GA: "COUNTRY_GA";
  readonly GM: "COUNTRY_GM";
  readonly GE: "COUNTRY_GE";
  readonly DE: "COUNTRY_DE";
  readonly GH: "COUNTRY_GH";
  readonly GI: "COUNTRY_GI";
  readonly GR: "COUNTRY_GR";
  readonly GL: "COUNTRY_GL";
  readonly GD: "COUNTRY_GD";
  readonly GP: "COUNTRY_GP";
  readonly GU: "COUNTRY_GU";
  readonly GT: "COUNTRY_GT";
  readonly GG: "COUNTRY_GG";
  readonly GN: "COUNTRY_GN";
  readonly GW: "COUNTRY_GW";
  readonly GY: "COUNTRY_GY";
  readonly HT: "COUNTRY_HT";
  readonly HM: "COUNTRY_HM";
  readonly VA: "COUNTRY_VA";
  readonly HN: "COUNTRY_HN";
  readonly HK: "COUNTRY_HK";
  readonly HU: "COUNTRY_HU";
  readonly IS: "COUNTRY_IS";
  readonly IN: "COUNTRY_IN";
  readonly ID: "COUNTRY_ID";
  readonly IR: "COUNTRY_IR";
  readonly IQ: "COUNTRY_IQ";
  readonly IE: "COUNTRY_IE";
  readonly IM: "COUNTRY_IM";
  readonly IL: "COUNTRY_IL";
  readonly IT: "COUNTRY_IT";
  readonly JM: "COUNTRY_JM";
  readonly JP: "COUNTRY_JP";
  readonly JE: "COUNTRY_JE";
  readonly JO: "COUNTRY_JO";
  readonly KZ: "COUNTRY_KZ";
  readonly KE: "COUNTRY_KE";
  readonly KI: "COUNTRY_KI";
  readonly KP: "COUNTRY_KP";
  readonly KR: "COUNTRY_KR";
  readonly KW: "COUNTRY_KW";
  readonly KG: "COUNTRY_KG";
  readonly LA: "COUNTRY_LA";
  readonly LV: "COUNTRY_LV";
  readonly LB: "COUNTRY_LB";
  readonly LS: "COUNTRY_LS";
  readonly LR: "COUNTRY_LR";
  readonly LY: "COUNTRY_LY";
  readonly LI: "COUNTRY_LI";
  readonly LT: "COUNTRY_LT";
  readonly LU: "COUNTRY_LU";
  readonly MO: "COUNTRY_MO";
  readonly MK: "COUNTRY_MK";
  readonly MG: "COUNTRY_MG";
  readonly MW: "COUNTRY_MW";
  readonly MY: "COUNTRY_MY";
  readonly MV: "COUNTRY_MV";
  readonly ML: "COUNTRY_ML";
  readonly MT: "COUNTRY_MT";
  readonly MH: "COUNTRY_MH";
  readonly MQ: "COUNTRY_MQ";
  readonly MR: "COUNTRY_MR";
  readonly MU: "COUNTRY_MU";
  readonly YT: "COUNTRY_YT";
  readonly MX: "COUNTRY_MX";
  readonly FM: "COUNTRY_FM";
  readonly MD: "COUNTRY_MD";
  readonly MC: "COUNTRY_MC";
  readonly MN: "COUNTRY_MN";
  readonly ME: "COUNTRY_ME";
  readonly MS: "COUNTRY_MS";
  readonly MA: "COUNTRY_MA";
  readonly MZ: "COUNTRY_MZ";
  readonly MM: "COUNTRY_MM";
  readonly NA: "COUNTRY_NA";
  readonly NR: "COUNTRY_NR";
  readonly NP: "COUNTRY_NP";
  readonly NL: "COUNTRY_NL";
  readonly NC: "COUNTRY_NC";
  readonly NZ: "COUNTRY_NZ";
  readonly NI: "COUNTRY_NI";
  readonly NE: "COUNTRY_NE";
  readonly NG: "COUNTRY_NG";
  readonly NU: "COUNTRY_NU";
  readonly NF: "COUNTRY_NF";
  readonly MP: "COUNTRY_MP";
  readonly NO: "COUNTRY_NO";
  readonly OM: "COUNTRY_OM";
  readonly PK: "COUNTRY_PK";
  readonly PW: "COUNTRY_PW";
  readonly PS: "COUNTRY_PS";
  readonly PA: "COUNTRY_PA";
  readonly PG: "COUNTRY_PG";
  readonly PY: "COUNTRY_PY";
  readonly PE: "COUNTRY_PE";
  readonly PH: "COUNTRY_PH";
  readonly PN: "COUNTRY_PN";
  readonly PL: "COUNTRY_PL";
  readonly PT: "COUNTRY_PT";
  readonly PR: "COUNTRY_PR";
  readonly QA: "COUNTRY_QA";
  readonly RE: "COUNTRY_RE";
  readonly RO: "COUNTRY_RO";
  readonly RU: "COUNTRY_RU";
  readonly RW: "COUNTRY_RW";
  readonly BL: "COUNTRY_BL";
  readonly SH: "COUNTRY_SH";
  readonly KN: "COUNTRY_KN";
  readonly LC: "COUNTRY_LC";
  readonly MF: "COUNTRY_MF";
  readonly PM: "COUNTRY_PM";
  readonly VC: "COUNTRY_VC";
  readonly WS: "COUNTRY_WS";
  readonly SM: "COUNTRY_SM";
  readonly ST: "COUNTRY_ST";
  readonly SA: "COUNTRY_SA";
  readonly SN: "COUNTRY_SN";
  readonly RS: "COUNTRY_RS";
  readonly SC: "COUNTRY_SC";
  readonly SL: "COUNTRY_SL";
  readonly SG: "COUNTRY_SG";
  readonly SX: "COUNTRY_SX";
  readonly SK: "COUNTRY_SK";
  readonly SI: "COUNTRY_SI";
  readonly SB: "COUNTRY_SB";
  readonly SO: "COUNTRY_SO";
  readonly ZA: "COUNTRY_ZA";
  readonly GS: "COUNTRY_GS";
  readonly SS: "COUNTRY_SS";
  readonly ES: "COUNTRY_ES";
  readonly LK: "COUNTRY_LK";
  readonly SD: "COUNTRY_SD";
  readonly SR: "COUNTRY_SR";
  readonly SJ: "COUNTRY_SJ";
  readonly SZ: "COUNTRY_SZ";
  readonly SE: "COUNTRY_SE";
  readonly CH: "COUNTRY_CH";
  readonly SY: "COUNTRY_SY";
  readonly TW: "COUNTRY_TW";
  readonly TJ: "COUNTRY_TJ";
  readonly TZ: "COUNTRY_TZ";
  readonly TH: "COUNTRY_TH";
  readonly TL: "COUNTRY_TL";
  readonly TG: "COUNTRY_TG";
  readonly TK: "COUNTRY_TK";
  readonly TO: "COUNTRY_TO";
  readonly TT: "COUNTRY_TT";
  readonly TN: "COUNTRY_TN";
  readonly TR: "COUNTRY_TR";
  readonly TM: "COUNTRY_TM";
  readonly TC: "COUNTRY_TC";
  readonly TV: "COUNTRY_TV";
  readonly UG: "COUNTRY_UG";
  readonly UA: "COUNTRY_UA";
  readonly AE: "COUNTRY_AE";
  readonly GB: "COUNTRY_GB";
  readonly US: "COUNTRY_US";
  readonly UM: "COUNTRY_UM";
  readonly UY: "COUNTRY_UY";
  readonly UZ: "COUNTRY_UZ";
  readonly VU: "COUNTRY_VU";
  readonly VE: "COUNTRY_VE";
  readonly VN: "COUNTRY_VN";
  readonly VG: "COUNTRY_VG";
  readonly VI: "COUNTRY_VI";
  readonly WF: "COUNTRY_WF";
  readonly EH: "COUNTRY_EH";
  readonly YE: "COUNTRY_YE";
  readonly ZM: "COUNTRY_ZM";
  readonly ZW: "COUNTRY_ZW";
};
type Country = typeof Country[keyof typeof Country];

declare const Currency: {
  readonly KRW: "CURRENCY_KRW";
  readonly USD: "CURRENCY_USD";
  readonly EUR: "CURRENCY_EUR";
  readonly JPY: "CURRENCY_JPY";
  readonly CNY: "CURRENCY_CNY";
  readonly VND: "CURRENCY_VND";
  readonly THB: "CURRENCY_THB";
  readonly SGD: "CURRENCY_SGD";
  readonly AUD: "CURRENCY_AUD";
  readonly HKD: "CURRENCY_HKD";
  readonly AED: "CURRENCY_AED";
  readonly AFN: "CURRENCY_AFN";
  readonly ALL: "CURRENCY_ALL";
  readonly AMD: "CURRENCY_AMD";
  readonly ANG: "CURRENCY_ANG";
  readonly AOA: "CURRENCY_AOA";
  readonly ARS: "CURRENCY_ARS";
  readonly AWG: "CURRENCY_AWG";
  readonly AZN: "CURRENCY_AZN";
  readonly BAM: "CURRENCY_BAM";
  readonly BBD: "CURRENCY_BBD";
  readonly BDT: "CURRENCY_BDT";
  readonly BGN: "CURRENCY_BGN";
  readonly BHD: "CURRENCY_BHD";
  readonly BIF: "CURRENCY_BIF";
  readonly BMD: "CURRENCY_BMD";
  readonly BND: "CURRENCY_BND";
  readonly BOB: "CURRENCY_BOB";
  readonly BOV: "CURRENCY_BOV";
  readonly BRL: "CURRENCY_BRL";
  readonly BSD: "CURRENCY_BSD";
  readonly BTN: "CURRENCY_BTN";
  readonly BWP: "CURRENCY_BWP";
  readonly BYN: "CURRENCY_BYN";
  readonly BZD: "CURRENCY_BZD";
  readonly CAD: "CURRENCY_CAD";
  readonly CDF: "CURRENCY_CDF";
  readonly CHE: "CURRENCY_CHE";
  readonly CHF: "CURRENCY_CHF";
  readonly CHW: "CURRENCY_CHW";
  readonly CLF: "CURRENCY_CLF";
  readonly CLP: "CURRENCY_CLP";
  readonly COP: "CURRENCY_COP";
  readonly COU: "CURRENCY_COU";
  readonly CRC: "CURRENCY_CRC";
  readonly CUC: "CURRENCY_CUC";
  readonly CUP: "CURRENCY_CUP";
  readonly CVE: "CURRENCY_CVE";
  readonly CZK: "CURRENCY_CZK";
  readonly DJF: "CURRENCY_DJF";
  readonly DKK: "CURRENCY_DKK";
  readonly DOP: "CURRENCY_DOP";
  readonly DZD: "CURRENCY_DZD";
  readonly EGP: "CURRENCY_EGP";
  readonly ERN: "CURRENCY_ERN";
  readonly ETB: "CURRENCY_ETB";
  readonly FJD: "CURRENCY_FJD";
  readonly FKP: "CURRENCY_FKP";
  readonly GBP: "CURRENCY_GBP";
  readonly GEL: "CURRENCY_GEL";
  readonly GHS: "CURRENCY_GHS";
  readonly GIP: "CURRENCY_GIP";
  readonly GMD: "CURRENCY_GMD";
  readonly GNF: "CURRENCY_GNF";
  readonly GTQ: "CURRENCY_GTQ";
  readonly GYD: "CURRENCY_GYD";
  readonly HNL: "CURRENCY_HNL";
  readonly HRK: "CURRENCY_HRK";
  readonly HTG: "CURRENCY_HTG";
  readonly HUF: "CURRENCY_HUF";
  readonly IDR: "CURRENCY_IDR";
  readonly ILS: "CURRENCY_ILS";
  readonly INR: "CURRENCY_INR";
  readonly IQD: "CURRENCY_IQD";
  readonly IRR: "CURRENCY_IRR";
  readonly ISK: "CURRENCY_ISK";
  readonly JMD: "CURRENCY_JMD";
  readonly JOD: "CURRENCY_JOD";
  readonly KES: "CURRENCY_KES";
  readonly KGS: "CURRENCY_KGS";
  readonly KHR: "CURRENCY_KHR";
  readonly KMF: "CURRENCY_KMF";
  readonly KPW: "CURRENCY_KPW";
  readonly KWD: "CURRENCY_KWD";
  readonly KYD: "CURRENCY_KYD";
  readonly KZT: "CURRENCY_KZT";
  readonly LAK: "CURRENCY_LAK";
  readonly LBP: "CURRENCY_LBP";
  readonly LKR: "CURRENCY_LKR";
  readonly LRD: "CURRENCY_LRD";
  readonly LSL: "CURRENCY_LSL";
  readonly LYD: "CURRENCY_LYD";
  readonly MAD: "CURRENCY_MAD";
  readonly MDL: "CURRENCY_MDL";
  readonly MGA: "CURRENCY_MGA";
  readonly MKD: "CURRENCY_MKD";
  readonly MMK: "CURRENCY_MMK";
  readonly MNT: "CURRENCY_MNT";
  readonly MOP: "CURRENCY_MOP";
  readonly MRU: "CURRENCY_MRU";
  readonly MUR: "CURRENCY_MUR";
  readonly MVR: "CURRENCY_MVR";
  readonly MWK: "CURRENCY_MWK";
  readonly MXN: "CURRENCY_MXN";
  readonly MXV: "CURRENCY_MXV";
  readonly MYR: "CURRENCY_MYR";
  readonly MZN: "CURRENCY_MZN";
  readonly NAD: "CURRENCY_NAD";
  readonly NGN: "CURRENCY_NGN";
  readonly NIO: "CURRENCY_NIO";
  readonly NOK: "CURRENCY_NOK";
  readonly NPR: "CURRENCY_NPR";
  readonly NZD: "CURRENCY_NZD";
  readonly OMR: "CURRENCY_OMR";
  readonly PAB: "CURRENCY_PAB";
  readonly PEN: "CURRENCY_PEN";
  readonly PGK: "CURRENCY_PGK";
  readonly PHP: "CURRENCY_PHP";
  readonly PKR: "CURRENCY_PKR";
  readonly PLN: "CURRENCY_PLN";
  readonly PYG: "CURRENCY_PYG";
  readonly QAR: "CURRENCY_QAR";
  readonly RON: "CURRENCY_RON";
  readonly RSD: "CURRENCY_RSD";
  readonly RUB: "CURRENCY_RUB";
  readonly RWF: "CURRENCY_RWF";
  readonly SAR: "CURRENCY_SAR";
  readonly SBD: "CURRENCY_SBD";
  readonly SCR: "CURRENCY_SCR";
  readonly SDG: "CURRENCY_SDG";
  readonly SEK: "CURRENCY_SEK";
  readonly SHP: "CURRENCY_SHP";
  readonly SLE: "CURRENCY_SLE";
  readonly SLL: "CURRENCY_SLL";
  readonly SOS: "CURRENCY_SOS";
  readonly SRD: "CURRENCY_SRD";
  readonly SSP: "CURRENCY_SSP";
  readonly STN: "CURRENCY_STN";
  readonly SVC: "CURRENCY_SVC";
  readonly SYP: "CURRENCY_SYP";
  readonly SZL: "CURRENCY_SZL";
  readonly TJS: "CURRENCY_TJS";
  readonly TMT: "CURRENCY_TMT";
  readonly TND: "CURRENCY_TND";
  readonly TOP: "CURRENCY_TOP";
  readonly TRY: "CURRENCY_TRY";
  readonly TTD: "CURRENCY_TTD";
  readonly TWD: "CURRENCY_TWD";
  readonly TZS: "CURRENCY_TZS";
  readonly UAH: "CURRENCY_UAH";
  readonly UGX: "CURRENCY_UGX";
  readonly USN: "CURRENCY_USN";
  readonly UYI: "CURRENCY_UYI";
  readonly UYU: "CURRENCY_UYU";
  readonly UYW: "CURRENCY_UYW";
  readonly UZS: "CURRENCY_UZS";
  readonly VED: "CURRENCY_VED";
  readonly VES: "CURRENCY_VES";
  readonly VUV: "CURRENCY_VUV";
  readonly WST: "CURRENCY_WST";
  readonly XAF: "CURRENCY_XAF";
  readonly XAG: "CURRENCY_XAG";
  readonly XAU: "CURRENCY_XAU";
  readonly XBA: "CURRENCY_XBA";
  readonly XBB: "CURRENCY_XBB";
  readonly XBC: "CURRENCY_XBC";
  readonly XBD: "CURRENCY_XBD";
  readonly XCD: "CURRENCY_XCD";
  readonly XDR: "CURRENCY_XDR";
  readonly XOF: "CURRENCY_XOF";
  readonly XPD: "CURRENCY_XPD";
  readonly XPF: "CURRENCY_XPF";
  readonly XPT: "CURRENCY_XPT";
  readonly XSU: "CURRENCY_XSU";
  readonly XTS: "CURRENCY_XTS";
  readonly XUA: "CURRENCY_XUA";
  readonly XXX: "CURRENCY_XXX";
  readonly YER: "CURRENCY_YER";
  readonly ZAR: "CURRENCY_ZAR";
  readonly ZMW: "CURRENCY_ZMW";
  readonly ZWL: "CURRENCY_ZWL";
};
type Currency = typeof Currency[keyof typeof Currency];

declare const EasyPayProvider: {
  readonly PAYCO: "EASY_PAY_PROVIDER_PAYCO";
  readonly SAMSUNGPAY: "EASY_PAY_PROVIDER_SAMSUNGPAY";
  readonly SSGPAY: "EASY_PAY_PROVIDER_SSGPAY";
  readonly KAKAOPAY: "EASY_PAY_PROVIDER_KAKAOPAY";
  readonly NAVERPAY: "EASY_PAY_PROVIDER_NAVERPAY";
  readonly CHAI: "EASY_PAY_PROVIDER_CHAI";
  readonly LPAY: "EASY_PAY_PROVIDER_LPAY";
  readonly KPAY: "EASY_PAY_PROVIDER_KPAY";
  readonly TOSSPAY: "EASY_PAY_PROVIDER_TOSSPAY";
  readonly LGPAY: "EASY_PAY_PROVIDER_LGPAY";
};
type EasyPayProvider = typeof EasyPayProvider[keyof typeof EasyPayProvider];

declare const Gender: {
  readonly MALE: "GENDER_MALE";
  readonly FEMALE: "GENDER_FEMALE";
  readonly OTHER: "GENDER_OTHER";
};
type Gender = typeof Gender[keyof typeof Gender];

declare const GiftCertificateType: {
  readonly BOOKNLIFE: "GIFT_CERTIFICATE_TYPE_BOOKNLIFE";
  readonly SMART_MUNSANG: "GIFT_CERTIFICATE_TYPE_SMART_MUNSANG";
  readonly CULTURELAND: "GIFT_CERTIFICATE_TYPE_CULTURELAND";
  readonly HAPPYMONEY: "GIFT_CERTIFICATE_TYPE_HAPPYMONEY";
};
type GiftCertificateType =
  typeof GiftCertificateType[keyof typeof GiftCertificateType];

declare const Locale: {
  readonly KO_KR: "KO_KR";
  readonly EN_US: "EN_US";
};
type Locale = typeof Locale[keyof typeof Locale];

declare const PgProvider: {
  readonly HTML5_INICIS: "PG_PROVIDER_HTML5_INICIS";
  readonly PAYPAL: "PG_PROVIDER_PAYPAL";
  readonly INICIS: "PG_PROVIDER_INICIS";
  readonly DANAL: "PG_PROVIDER_DANAL";
  readonly NICE: "PG_PROVIDER_NICE";
  readonly DANAL_TPAY: "PG_PROVIDER_DANAL_TPAY";
  readonly JTNET: "PG_PROVIDER_JTNET";
  readonly UPLUS: "PG_PROVIDER_UPLUS";
  readonly NAVERPAY: "PG_PROVIDER_NAVERPAY";
  readonly KAKAO: "PG_PROVIDER_KAKAO";
  readonly SETTLE: "PG_PROVIDER_SETTLE";
  readonly KCP: "PG_PROVIDER_KCP";
  readonly MOBILIANS: "PG_PROVIDER_MOBILIANS";
  readonly KAKAOPAY: "PG_PROVIDER_KAKAOPAY";
  readonly NAVERCO: "PG_PROVIDER_NAVERCO";
  readonly SYRUP: "PG_PROVIDER_SYRUP";
  readonly KICC: "PG_PROVIDER_KICC";
  readonly EXIMBAY: "PG_PROVIDER_EXIMBAY";
  readonly SMILEPAY: "PG_PROVIDER_SMILEPAY";
  readonly PAYCO: "PG_PROVIDER_PAYCO";
  readonly KCP_BILLING: "PG_PROVIDER_KCP_BILLING";
  readonly ALIPAY: "PG_PROVIDER_ALIPAY";
  readonly PAYPLE: "PG_PROVIDER_PAYPLE";
  readonly CHAI: "PG_PROVIDER_CHAI";
  readonly BLUEWALNUT: "PG_PROVIDER_BLUEWALNUT";
  readonly SMARTRO: "PG_PROVIDER_SMARTRO";
  readonly PAYMENTWALL: "PG_PROVIDER_PAYMENTWALL";
  readonly TOSSPAYMENTS: "PG_PROVIDER_TOSSPAYMENTS";
  readonly KCP_QUICK: "PG_PROVIDER_KCP_QUICK";
  readonly DAOU: "PG_PROVIDER_DAOU";
  readonly GALAXIA: "PG_PROVIDER_GALAXIA";
  readonly TOSSPAY: "PG_PROVIDER_TOSSPAY";
  readonly KCP_DIRECT: "PG_PROVIDER_KCP_DIRECT";
  readonly SETTLE_ACC: "PG_PROVIDER_SETTLE_ACC";
  readonly SETTLE_FIRM: "PG_PROVIDER_SETTLE_FIRM";
  readonly INICIS_UNIFIED: "PG_PROVIDER_INICIS_UNIFIED";
  readonly KSNET: "PG_PROVIDER_KSNET";
};
type PgProvider = typeof PgProvider[keyof typeof PgProvider];

declare const TransactionType: {
  readonly Payment: "PAYMENT";
  readonly IssueBillingKey: "ISSUE_BILLING_KEY";
};
type TransactionType = typeof TransactionType[keyof typeof TransactionType];

declare const VirtualAccountType: {
  readonly NORMAL: "VIRTUAL_ACCOUNT_TYPE_NORMAL";
  readonly FIXED: "VIRTUAL_ACCOUNT_TYPE_FIXED";
};
type VirtualAccountType =
  typeof VirtualAccountType[keyof typeof VirtualAccountType];

declare const WindowType: {
  readonly IFRAME: "IFRAME";
  readonly POPUP: "POPUP";
  readonly REDIRECTION: "REDIRECTION";
};
type WindowType = typeof WindowType[keyof typeof WindowType];

type BypassOption = {
  discountCode?: string;
  useInternationalCardOnly?: boolean;
};

type Bypass = BypassOption | {};

type Customer = {
  customerId?: string;
  customer_uid?: string;
  fullName?: string;
  firstName?: string;
  lastName?: string;
  phoneNumber?: string;
  email?: string;
  address?: string;
  zipcode?: string;
  gender?: Gender;
  birthYear?: string;
};

type OfferPeriod = {
  range?: {
    from: string;
  } | {
    to: string;
  };
};

type PayMethod =
  | "CARD"
  | "VIRTUAL_ACCOUNT"
  | "TRANSFER"
  | "MOBILE"
  | "GIFT_CERTIFICATE"
  | "EASY_PAY";

type Product = {
  id: string;
  name: string;
  code?: string;
  unitPrice: number;
  quantity: number;
  tag?: string;
};

declare const ProductType: {
  readonly REAL: "PRODUCT_TYPE_REAL";
  readonly DIGITAL: "PRODUCT_TYPE_DIGITAL";
};
type ProductType = typeof ProductType[keyof typeof ProductType];

type StoreDetails = {
  ceoFullName?: string;
  phoneNumber?: string;
  address?: string;
  zipcode?: string;
};

type WindowSize = {
  width: number;
  height: number;
};

type WindowTypes = {
  pc?: WindowType;
  mobile?: WindowType;
};

type Version = "v1" | "v2";

type index_d$3_Bank = Bank;
type index_d$3_Bypass = Bypass;
type index_d$3_CardCompany = CardCompany;
type index_d$3_Carrier = Carrier;
type index_d$3_CashReceiptType = CashReceiptType;
type index_d$3_Country = Country;
type index_d$3_Currency = Currency;
type index_d$3_Customer = Customer;
type index_d$3_EasyPayProvider = EasyPayProvider;
type index_d$3_Gender = Gender;
type index_d$3_GiftCertificateType = GiftCertificateType;
type index_d$3_Locale = Locale;
type index_d$3_OfferPeriod = OfferPeriod;
type index_d$3_PayMethod = PayMethod;
type index_d$3_PgProvider = PgProvider;
type index_d$3_Product = Product;
type index_d$3_ProductType = ProductType;
type index_d$3_StoreDetails = StoreDetails;
type index_d$3_TransactionType = TransactionType;
type index_d$3_Version = Version;
type index_d$3_VirtualAccountType = VirtualAccountType;
type index_d$3_WindowSize = WindowSize;
type index_d$3_WindowType = WindowType;
type index_d$3_WindowTypes = WindowTypes;
declare namespace index_d$3 {
  export {
    index_d$3_Bank as Bank,
    BillingKeyPayMethod as BillingKeyMethod,
    index_d$3_Bypass as Bypass,
    index_d$3_CardCompany as CardCompany,
    index_d$3_Carrier as Carrier,
    index_d$3_CashReceiptType as CashReceiptType,
    index_d$3_Country as Country,
    index_d$3_Currency as Currency,
    index_d$3_Customer as Customer,
    index_d$3_EasyPayProvider as EasyPayProvider,
    index_d$3_Gender as Gender,
    index_d$3_GiftCertificateType as GiftCertificateType,
    index_d$3_Locale as Locale,
    index_d$3_OfferPeriod as OfferPeriod,
    index_d$3_PayMethod as PayMethod,
    index_d$3_PgProvider as PgProvider,
    index_d$3_Product as Product,
    index_d$3_ProductType as ProductType,
    index_d$3_StoreDetails as StoreDetails,
    index_d$3_TransactionType as TransactionType,
    index_d$3_Version as Version,
    index_d$3_VirtualAccountType as VirtualAccountType,
    index_d$3_WindowSize as WindowSize,
    index_d$3_WindowType as WindowType,
    index_d$3_WindowTypes as WindowTypes,
  };
}

type CheckoutServiceErrorCode =
  | "ParsePrepareResponseFailed"
  | "ParsePgRawResponseFailed"
  | "BadRequest";

type GrpcErrorCode =
  | "Ok"
  | "Cancelled"
  | "Unknown"
  | "InvalidArgument"
  | "DeadlineExceeded"
  | "NotFound"
  | "AlreadyExists"
  | "PermissionDenied"
  | "ResourceExhausted"
  | "FailedPrecondition"
  | "Aborted"
  | "OutOfRange"
  | "Unimplemented"
  | "Internal"
  | "Unavailable"
  | "DataLoss"
  | "Unauthenticated";

type TxServiceIssueErrorCode =
  | "RequestParseFailed"
  | "InvalidEntityState"
  | "ConfirmUrlRequired"
  | "StoreNotFound"
  | "ChannelNotFound"
  | "PGProviderError"
  | "AllChannelsNotSatisfied"
  | "BillingKeyNotFound"
  | "UnknownError";

type IssueBillingKeyErrorCode =
  | CheckoutServiceErrorCode
  | GrpcErrorCode
  | TxServiceIssueErrorCode;
declare class IssueBillingKeyError extends Error {
  transactionType: "ISSUE_BILLING_KEY";
  code: IssueBillingKeyErrorCode;
  message: string;
  constructor({ code, message }: {
    code: IssueBillingKeyErrorCode;
    message: string;
  });
}

type TxServicePayErrorCode =
  | "RequestParseFailed"
  | "InvalidEntityState"
  | "ConfirmUrlRequired"
  | "StoreNotFound"
  | "ChannelNotFound"
  | "PGProviderError"
  | "PaymentNotFound"
  | "PaymentAlreadyPaid"
  | "TransactionNotFound"
  | "AllChannelsNotSatisfied"
  | "AmountNotEqualToPredefined"
  | "ConfirmProcessFailed"
  | "UnknownError";

type PaymentErrorCode =
  | CheckoutServiceErrorCode
  | GrpcErrorCode
  | TxServicePayErrorCode;
declare class PaymentError extends Error {
  transactionType: "PAYMENT";
  code: PaymentErrorCode;
  message: string;
  constructor({ code, message }: {
    code: PaymentErrorCode;
    message: string;
  });
}

type ErrorResponse = {
  code: string;
  message: string;
  txId?: string;
  paymentId?: string;
};
declare class Prepare$1 extends Error {
  readonly response: {
    data: ErrorResponse;
  };
  constructor({ code, message, txId, paymentId }: ErrorResponse);
}

type index_d$2_IssueBillingKeyError = IssueBillingKeyError;
declare const index_d$2_IssueBillingKeyError: typeof IssueBillingKeyError;
type index_d$2_PaymentError = PaymentError;
declare const index_d$2_PaymentError: typeof PaymentError;
declare namespace index_d$2 {
  export {
    index_d$2_IssueBillingKeyError as IssueBillingKeyError,
    index_d$2_PaymentError as PaymentError,
    Prepare$1 as PrepareException,
  };
}

type BillingKeyMethodOptions<Method extends BillingKeyPayMethod, T> =
  & {
    billingKeyMethod: Method;
  }
  & {
    [K in Method as CapsToCamel<K>]?: T;
  };
type IssueBillingKeyRequest =
  & {
    storeId: string;
    channelName?: string;
    pgProvider?: PgProvider;
    isTestChannel?: boolean;
    billingKeyMethod: BillingKeyPayMethod;
    customer?: Customer;
    windowType?: WindowTypes;
    redirectUrl?: string;
    locale?: Locale;
    customData?: {
      [key: string]: any;
    };
    appScheme?: string;
  }
  & (
    | BillingKeyMethodOptions<"CARD", Card$1>
    | BillingKeyMethodOptions<"MOBILE", Mobile$1>
  );
type Card$1 = {
  cardCompany?: CardCompany;
};
type Mobile$1 = {
  carrier?: Carrier;
};

type PayMethodOptions<Method extends PayMethod, T> =
  & {
    payMethod: Method;
  }
  & {
    [K in Method as CapsToCamel<K>]?: T;
  };
type PaymentRequest =
  & {
    storeId: string;
    orderName: string;
    totalAmount: number;
    channelName?: string;
    pgProvider?: PgProvider;
    isTestChannel?: boolean;
    paymentId: string;
    taxFreeAmount?: number;
    customer?: Customer;
    windowType?: WindowTypes;
    redirectUrl?: string;
    noticeUrls?: string[];
    confirmUrl?: string;
    appScheme?: string;
    isEscrow?: boolean;
    products?: Product[];
    isCulturalExpense?: boolean;
    currency: Currency;
    locale?: Locale;
    customData?: {
      [key: string]: any;
    };
    bypass?: Bypass;
    productType?: ProductType;
    offerPeriod?: OfferPeriod;
    storeDetails?: StoreDetails;
    country?: Country;
  }
  & (
    | PayMethodOptions<"CARD", Card>
    | PayMethodOptions<"VIRTUAL_ACCOUNT", VirtualAccount>
    | PayMethodOptions<"TRANSFER", Transfer>
    | PayMethodOptions<"MOBILE", Mobile>
    | PayMethodOptions<"GIFT_CERTIFICATE", GiftCertificate>
    | PayMethodOptions<"EASY_PAY", EasyPay>
  );
type Card = {
  cardCompany?: CardCompany;
  installment?: Installment;
  useCardPoint?: boolean;
  useAppCardOnly?: boolean;
};
type VirtualAccount = {
  cashReceiptType?: CashReceiptType;
  accountType?: VirtualAccountType;
  accountKey?: string;
  accountExpiry?: OneOfType<{
    validHours: number;
    dueDate: string;
  }>;
};
type Transfer = {
  cashReceiptType?: CashReceiptType;
  bankCode?: Bank;
};
type Mobile = {
  carrier?: Carrier;
};
type GiftCertificate = {
  giftCertificateType?: GiftCertificateType;
};
type EasyPay = {
  easyPayProvider: EasyPayProvider;
  installment?: Installment;
};
type FreeInstallmentPlan = {
  cardCompany: CardCompany;
  months: number[];
};
type Installment = {
  freeInstallmentPlans?: FreeInstallmentPlan[];
  monthOption?: OneOfType<{
    fixedMonth: number;
    availableMonthList: number[];
  }>;
};

declare namespace index_d$1 {
  export {
    IssueBillingKeyRequest as IssueBillingKey,
    PaymentRequest as Payment,
  };
}

type IssueBillingKeyResponse = {
  transactionType: typeof TransactionType.IssueBillingKey;
  billingKey: string;
  code?: string;
  message?: string;
};

type pgRawIssueBillingKeyResponse = {
  [key: string]: any;
};
type PrepareIssueBillingKeyResponse = {
  version: Version;
  transactionType: typeof TransactionType.IssueBillingKey;
  storeId: string;
  billingKey: string;
  redirectUrl: string;
  pgProvider: PgProvider;
  windowSize: WindowSize;
  windowType: WindowType;
  pgRawIssueBillingKeyResponse: pgRawIssueBillingKeyResponse;
};

type PaymentResponse = {
  transactionType: typeof TransactionType.Payment;
  txId: string;
  paymentId?: string;
  code?: string;
  message?: string;
};

type LegacyWindowType =
  | "WINDOW_TYPE_IFRAME"
  | "WINDOW_TYPE_REDIRECTION"
  | "WINDOW_TYPE_POPUP";
type PgRawResponse = {
  [key: string]: any;
};
type PreparePaymentResponse = {
  version: Version;
  transactionType: typeof TransactionType.Payment;
  storeId: string;
  txId: string;
  paymentId: string;
  redirectUrl: string;
  pgProvider: PgProvider;
  windowSize: WindowSize;
  windowType: WindowType | LegacyWindowType;
  pgRawResponse: PgRawResponse;
};

type Prepare = PrepareIssueBillingKeyResponse | PreparePaymentResponse;
type Transaction = IssueBillingKeyResponse | PaymentResponse;

type index_d_Prepare = Prepare;
type index_d_Transaction = Transaction;
declare namespace index_d {
  export {
    IssueBillingKeyResponse as IssueBillingKey,
    PaymentResponse as Payment,
    index_d_Prepare as Prepare,
    PrepareIssueBillingKeyResponse as PrepareIssueBillingKey,
    PreparePaymentResponse as PreparePayment,
    index_d_Transaction as Transaction,
  };
}

type CapsToCamel<
  PayMethod extends string,
  Result extends string = "",
  First extends boolean = true,
> = PayMethod extends `${infer Front}_${infer Rear}` ? CapsToCamel<
    Rear,
    `${Result}${First extends true ? Lowercase<Front>
      : Capitalize<Lowercase<Front>>}`,
    false
  >
  : `${Result}${First extends true ? Lowercase<PayMethod>
    : Capitalize<Lowercase<PayMethod>>}`;
type ValueOf<Obj> = Obj[keyof Obj];
type OneOnly<Obj, Key extends keyof Obj> =
  & {
    [key in Exclude<keyof Obj, Key>]+?: undefined;
  }
  & Pick<Obj, Key>;
type OneOfByKey<Obj> = {
  [key in keyof Obj]: OneOnly<Obj, key>;
};
type OneOfType<Obj> = ValueOf<OneOfByKey<Obj>>;

declare global {
    interface Window {
        PortOne: PortOne | undefined;
    }
}
interface PortOne {
    requestPayment(request: PaymentRequest): Promise<PaymentResponse>;
    requestIssueBillingKey(request: IssueBillingKeyRequest): Promise<IssueBillingKeyResponse>;
}
declare function setPortOneJsSdkUrl(url: string): string;

declare function requestPayment(request: PaymentRequest): Promise<PaymentResponse | undefined>;
declare function requestIssueBillingKey(request: IssueBillingKeyRequest): Promise<IssueBillingKeyResponse | undefined>;

export { index_d$3 as Entity, index_d$2 as Exception, index_d$1 as Request, index_d as Response, setPortOneJsSdkUrl as __INTERNAL__setPortOneSdkUrl, requestIssueBillingKey, requestPayment };
